/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MVizMsg'
 * message type.
 */

public class MVizMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 34;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 147;

    /** Create a new MVizMsg of size 34. */
    public MVizMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MVizMsg of the given data_length. */
    public MVizMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg with the given data_length
     * and base offset.
     */
    public MVizMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg using the given byte array
     * as backing store.
     */
    public MVizMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public MVizMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MVizMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg embedded in the given message
     * at the given base offset.
     */
    public MVizMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MVizMsg embedded in the given message
     * at the given base offset and length.
     */
    public MVizMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MVizMsg> \n";
      try {
        s += "  [version=0x"+Long.toHexString(get_version())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [interval=0x"+Long.toHexString(get_interval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [origin=0x"+Long.toHexString(get_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [count=0x"+Long.toHexString(get_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [voltage_reading=0x"+Long.toHexString(get_voltage_reading())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [irradiance_reading=0x"+Long.toHexString(get_irradiance_reading())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temp_reading=0x"+Long.toHexString(get_temp_reading())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [etx=0x"+Long.toHexString(get_etx())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [link_route_value=0x"+Long.toHexString(get_link_route_value())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [link_route_addr=0x"+Long.toHexString(get_link_route_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Beacontrs=0x"+Long.toHexString(get_Beacontrs())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Beaconrcv=0x"+Long.toHexString(get_Beaconrcv())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Datafwd=0x"+Long.toHexString(get_Datafwd())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Datarcv=0x"+Long.toHexString(get_Datarcv())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Dataov=0x"+Long.toHexString(get_Dataov())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Percent_cap=0x"+Long.toHexString(get_Percent_cap())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Remain_Life=0x"+Long.toHexString(get_Remain_Life())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: version
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'version' is signed (false).
     */
    public static boolean isSigned_version() {
        return false;
    }

    /**
     * Return whether the field 'version' is an array (false).
     */
    public static boolean isArray_version() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'version'
     */
    public static int offset_version() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'version'
     */
    public static int offsetBits_version() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'version'
     */
    public int get_version() {
        return (int)getUIntBEElement(offsetBits_version(), 16);
    }

    /**
     * Set the value of the field 'version'
     */
    public void set_version(int value) {
        setUIntBEElement(offsetBits_version(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'version'
     */
    public static int size_version() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'version'
     */
    public static int sizeBits_version() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: interval
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'interval' is signed (false).
     */
    public static boolean isSigned_interval() {
        return false;
    }

    /**
     * Return whether the field 'interval' is an array (false).
     */
    public static boolean isArray_interval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'interval'
     */
    public static int offset_interval() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'interval'
     */
    public static int offsetBits_interval() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'interval'
     */
    public int get_interval() {
        return (int)getUIntBEElement(offsetBits_interval(), 16);
    }

    /**
     * Set the value of the field 'interval'
     */
    public void set_interval(int value) {
        setUIntBEElement(offsetBits_interval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'interval'
     */
    public static int size_interval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'interval'
     */
    public static int sizeBits_interval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: origin
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'origin' is signed (false).
     */
    public static boolean isSigned_origin() {
        return false;
    }

    /**
     * Return whether the field 'origin' is an array (false).
     */
    public static boolean isArray_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'origin'
     */
    public static int offset_origin() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'origin'
     */
    public static int offsetBits_origin() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'origin'
     */
    public int get_origin() {
        return (int)getUIntBEElement(offsetBits_origin(), 16);
    }

    /**
     * Set the value of the field 'origin'
     */
    public void set_origin(int value) {
        setUIntBEElement(offsetBits_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'origin'
     */
    public static int size_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'origin'
     */
    public static int sizeBits_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: count
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'count' is signed (false).
     */
    public static boolean isSigned_count() {
        return false;
    }

    /**
     * Return whether the field 'count' is an array (false).
     */
    public static boolean isArray_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'count'
     */
    public static int offset_count() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'count'
     */
    public static int offsetBits_count() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'count'
     */
    public int get_count() {
        return (int)getUIntBEElement(offsetBits_count(), 16);
    }

    /**
     * Set the value of the field 'count'
     */
    public void set_count(int value) {
        setUIntBEElement(offsetBits_count(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'count'
     */
    public static int size_count() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'count'
     */
    public static int sizeBits_count() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: voltage_reading
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'voltage_reading' is signed (false).
     */
    public static boolean isSigned_voltage_reading() {
        return false;
    }

    /**
     * Return whether the field 'voltage_reading' is an array (false).
     */
    public static boolean isArray_voltage_reading() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'voltage_reading'
     */
    public static int offset_voltage_reading() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'voltage_reading'
     */
    public static int offsetBits_voltage_reading() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'voltage_reading'
     */
    public int get_voltage_reading() {
        return (int)getUIntBEElement(offsetBits_voltage_reading(), 16);
    }

    /**
     * Set the value of the field 'voltage_reading'
     */
    public void set_voltage_reading(int value) {
        setUIntBEElement(offsetBits_voltage_reading(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'voltage_reading'
     */
    public static int size_voltage_reading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'voltage_reading'
     */
    public static int sizeBits_voltage_reading() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: irradiance_reading
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'irradiance_reading' is signed (false).
     */
    public static boolean isSigned_irradiance_reading() {
        return false;
    }

    /**
     * Return whether the field 'irradiance_reading' is an array (false).
     */
    public static boolean isArray_irradiance_reading() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'irradiance_reading'
     */
    public static int offset_irradiance_reading() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'irradiance_reading'
     */
    public static int offsetBits_irradiance_reading() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'irradiance_reading'
     */
    public int get_irradiance_reading() {
        return (int)getUIntBEElement(offsetBits_irradiance_reading(), 16);
    }

    /**
     * Set the value of the field 'irradiance_reading'
     */
    public void set_irradiance_reading(int value) {
        setUIntBEElement(offsetBits_irradiance_reading(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'irradiance_reading'
     */
    public static int size_irradiance_reading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'irradiance_reading'
     */
    public static int sizeBits_irradiance_reading() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temp_reading
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temp_reading' is signed (false).
     */
    public static boolean isSigned_temp_reading() {
        return false;
    }

    /**
     * Return whether the field 'temp_reading' is an array (false).
     */
    public static boolean isArray_temp_reading() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temp_reading'
     */
    public static int offset_temp_reading() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temp_reading'
     */
    public static int offsetBits_temp_reading() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'temp_reading'
     */
    public int get_temp_reading() {
        return (int)getUIntBEElement(offsetBits_temp_reading(), 16);
    }

    /**
     * Set the value of the field 'temp_reading'
     */
    public void set_temp_reading(int value) {
        setUIntBEElement(offsetBits_temp_reading(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temp_reading'
     */
    public static int size_temp_reading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temp_reading'
     */
    public static int sizeBits_temp_reading() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: etx
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'etx' is signed (false).
     */
    public static boolean isSigned_etx() {
        return false;
    }

    /**
     * Return whether the field 'etx' is an array (false).
     */
    public static boolean isArray_etx() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'etx'
     */
    public static int offset_etx() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'etx'
     */
    public static int offsetBits_etx() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'etx'
     */
    public int get_etx() {
        return (int)getUIntBEElement(offsetBits_etx(), 16);
    }

    /**
     * Set the value of the field 'etx'
     */
    public void set_etx(int value) {
        setUIntBEElement(offsetBits_etx(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'etx'
     */
    public static int size_etx() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'etx'
     */
    public static int sizeBits_etx() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: link_route_value
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'link_route_value' is signed (false).
     */
    public static boolean isSigned_link_route_value() {
        return false;
    }

    /**
     * Return whether the field 'link_route_value' is an array (false).
     */
    public static boolean isArray_link_route_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'link_route_value'
     */
    public static int offset_link_route_value() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'link_route_value'
     */
    public static int offsetBits_link_route_value() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'link_route_value'
     */
    public int get_link_route_value() {
        return (int)getUIntBEElement(offsetBits_link_route_value(), 16);
    }

    /**
     * Set the value of the field 'link_route_value'
     */
    public void set_link_route_value(int value) {
        setUIntBEElement(offsetBits_link_route_value(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'link_route_value'
     */
    public static int size_link_route_value() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'link_route_value'
     */
    public static int sizeBits_link_route_value() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: link_route_addr
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'link_route_addr' is signed (false).
     */
    public static boolean isSigned_link_route_addr() {
        return false;
    }

    /**
     * Return whether the field 'link_route_addr' is an array (false).
     */
    public static boolean isArray_link_route_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'link_route_addr'
     */
    public static int offset_link_route_addr() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'link_route_addr'
     */
    public static int offsetBits_link_route_addr() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'link_route_addr'
     */
    public int get_link_route_addr() {
        return (int)getUIntBEElement(offsetBits_link_route_addr(), 16);
    }

    /**
     * Set the value of the field 'link_route_addr'
     */
    public void set_link_route_addr(int value) {
        setUIntBEElement(offsetBits_link_route_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'link_route_addr'
     */
    public static int size_link_route_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'link_route_addr'
     */
    public static int sizeBits_link_route_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Beacontrs
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Beacontrs' is signed (false).
     */
    public static boolean isSigned_Beacontrs() {
        return false;
    }

    /**
     * Return whether the field 'Beacontrs' is an array (false).
     */
    public static boolean isArray_Beacontrs() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Beacontrs'
     */
    public static int offset_Beacontrs() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Beacontrs'
     */
    public static int offsetBits_Beacontrs() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'Beacontrs'
     */
    public int get_Beacontrs() {
        return (int)getUIntBEElement(offsetBits_Beacontrs(), 16);
    }

    /**
     * Set the value of the field 'Beacontrs'
     */
    public void set_Beacontrs(int value) {
        setUIntBEElement(offsetBits_Beacontrs(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Beacontrs'
     */
    public static int size_Beacontrs() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Beacontrs'
     */
    public static int sizeBits_Beacontrs() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Beaconrcv
    //   Field type: int, unsigned
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Beaconrcv' is signed (false).
     */
    public static boolean isSigned_Beaconrcv() {
        return false;
    }

    /**
     * Return whether the field 'Beaconrcv' is an array (false).
     */
    public static boolean isArray_Beaconrcv() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Beaconrcv'
     */
    public static int offset_Beaconrcv() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Beaconrcv'
     */
    public static int offsetBits_Beaconrcv() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'Beaconrcv'
     */
    public int get_Beaconrcv() {
        return (int)getUIntBEElement(offsetBits_Beaconrcv(), 16);
    }

    /**
     * Set the value of the field 'Beaconrcv'
     */
    public void set_Beaconrcv(int value) {
        setUIntBEElement(offsetBits_Beaconrcv(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Beaconrcv'
     */
    public static int size_Beaconrcv() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Beaconrcv'
     */
    public static int sizeBits_Beaconrcv() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Datafwd
    //   Field type: int, unsigned
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Datafwd' is signed (false).
     */
    public static boolean isSigned_Datafwd() {
        return false;
    }

    /**
     * Return whether the field 'Datafwd' is an array (false).
     */
    public static boolean isArray_Datafwd() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Datafwd'
     */
    public static int offset_Datafwd() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Datafwd'
     */
    public static int offsetBits_Datafwd() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'Datafwd'
     */
    public int get_Datafwd() {
        return (int)getUIntBEElement(offsetBits_Datafwd(), 16);
    }

    /**
     * Set the value of the field 'Datafwd'
     */
    public void set_Datafwd(int value) {
        setUIntBEElement(offsetBits_Datafwd(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Datafwd'
     */
    public static int size_Datafwd() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Datafwd'
     */
    public static int sizeBits_Datafwd() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Datarcv
    //   Field type: int, unsigned
    //   Offset (bits): 208
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Datarcv' is signed (false).
     */
    public static boolean isSigned_Datarcv() {
        return false;
    }

    /**
     * Return whether the field 'Datarcv' is an array (false).
     */
    public static boolean isArray_Datarcv() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Datarcv'
     */
    public static int offset_Datarcv() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Datarcv'
     */
    public static int offsetBits_Datarcv() {
        return 208;
    }

    /**
     * Return the value (as a int) of the field 'Datarcv'
     */
    public int get_Datarcv() {
        return (int)getUIntBEElement(offsetBits_Datarcv(), 16);
    }

    /**
     * Set the value of the field 'Datarcv'
     */
    public void set_Datarcv(int value) {
        setUIntBEElement(offsetBits_Datarcv(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Datarcv'
     */
    public static int size_Datarcv() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Datarcv'
     */
    public static int sizeBits_Datarcv() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Dataov
    //   Field type: int, unsigned
    //   Offset (bits): 224
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Dataov' is signed (false).
     */
    public static boolean isSigned_Dataov() {
        return false;
    }

    /**
     * Return whether the field 'Dataov' is an array (false).
     */
    public static boolean isArray_Dataov() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Dataov'
     */
    public static int offset_Dataov() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Dataov'
     */
    public static int offsetBits_Dataov() {
        return 224;
    }

    /**
     * Return the value (as a int) of the field 'Dataov'
     */
    public int get_Dataov() {
        return (int)getUIntBEElement(offsetBits_Dataov(), 16);
    }

    /**
     * Set the value of the field 'Dataov'
     */
    public void set_Dataov(int value) {
        setUIntBEElement(offsetBits_Dataov(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Dataov'
     */
    public static int size_Dataov() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Dataov'
     */
    public static int sizeBits_Dataov() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Percent_cap
    //   Field type: int, unsigned
    //   Offset (bits): 240
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Percent_cap' is signed (false).
     */
    public static boolean isSigned_Percent_cap() {
        return false;
    }

    /**
     * Return whether the field 'Percent_cap' is an array (false).
     */
    public static boolean isArray_Percent_cap() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Percent_cap'
     */
    public static int offset_Percent_cap() {
        return (240 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Percent_cap'
     */
    public static int offsetBits_Percent_cap() {
        return 240;
    }

    /**
     * Return the value (as a int) of the field 'Percent_cap'
     */
    public int get_Percent_cap() {
        return (int)getUIntBEElement(offsetBits_Percent_cap(), 16);
    }

    /**
     * Set the value of the field 'Percent_cap'
     */
    public void set_Percent_cap(int value) {
        setUIntBEElement(offsetBits_Percent_cap(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Percent_cap'
     */
    public static int size_Percent_cap() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Percent_cap'
     */
    public static int sizeBits_Percent_cap() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Remain_Life
    //   Field type: int, unsigned
    //   Offset (bits): 256
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Remain_Life' is signed (false).
     */
    public static boolean isSigned_Remain_Life() {
        return false;
    }

    /**
     * Return whether the field 'Remain_Life' is an array (false).
     */
    public static boolean isArray_Remain_Life() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Remain_Life'
     */
    public static int offset_Remain_Life() {
        return (256 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Remain_Life'
     */
    public static int offsetBits_Remain_Life() {
        return 256;
    }

    /**
     * Return the value (as a int) of the field 'Remain_Life'
     */
    public int get_Remain_Life() {
        return (int)getUIntBEElement(offsetBits_Remain_Life(), 16);
    }

    /**
     * Set the value of the field 'Remain_Life'
     */
    public void set_Remain_Life(int value) {
        setUIntBEElement(offsetBits_Remain_Life(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Remain_Life'
     */
    public static int size_Remain_Life() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Remain_Life'
     */
    public static int sizeBits_Remain_Life() {
        return 16;
    }

}
